# ------------------------------------------------------------------------------
#
# Copyright 2011, 2012, 2013 Brent L. Brock and the Craighead Institute
#
# This file is part of Wild Planner.
#
# Wild Planner is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Wild Planner is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Wild Planner in the file named LICENSE.TXT.  If not, see <http://www.gnu.org/licenses/>.
#
# ------------------------------------------------------------------------------
#
# buildout_temp.py
# Created on: Wed Apr 13 2011 12:52:39 PM
#   (generated by ArcGIS/ModelBuilder)
# Usage: buildout_temp <parcelLayer> <existStructures> <constraintLayer> <Output_Structures> 
# ---------------------------------------------------------------------------

# Import system modules
import sys, string, os, arcpy
from functionlib import CreateTempWorkspace, CleanFiles, CreateRoadCost, GenRoads

# Set the necessary product code
arcpy.SetProduct("ArcInfo")

# Check out any necessary licenses
arcpy.CheckOutExtension("spatial")
arcpy.ProjectCompare = "FULL"

# Script arguments...
parcelLayer = sys.argv[1]
constraintLayer = sys.argv[2]
existStructures = sys.argv[3]
existRoads = sys.argv[4]
inDEM = sys.argv[5]
aExtent = sys.argv[6]
outStructures = sys.argv[7]
outRoads = sys.argv[8]

# Set up temporary workspace
scratchWS = arcpy.env.scratchWorkspace
tWorkspace = "in_memory"
##if scratchWS:
##    tWorkspace = CreateTempWorkspace(scratchWS)
##else:
##    r = outRoads.rsplit(os.sep,1)
##    outWorkspace = r[0]
##    arcpy.Workspace = outWorkspace
##    tWorkspace = CreateTempWorkspace(outWorkspace)

clippedParcels = tWorkspace + os.sep + "xxParcels"
newStructures = tWorkspace + os.sep + "xxStructures"
newRoads = tWorkspace + os.sep + "xxRoads"

arcpy.env.Extent = aExtent

# Select buildable portions of undeveloped parcels...

arcpy.AddMessage("Identifying undeveloped parcels...")
arcpy.SelectLayerByLocation_management(parcelLayer, "CONTAINS", existStructures, "", "NEW_SELECTION")
arcpy.SelectLayerByAttribute_management (parcelLayer, "SWITCH_SELECTION")
arcpy.MakeFeatureLayer_management(parcelLayer, "pLayer")
arcpy.AddMessage("Identifying buildable areas with undeveloped parcels...")
arcpy.Clip_analysis("pLayer", constraintLayer, clippedParcels)
arcpy.SelectLayerByAttribute_management (parcelLayer, "CLEAR_SELECTION")

# Generate future structures...
arcpy.AddMessage("Generating structures on undeveloped parcels...")
arcpy.FeatureToPoint_management(clippedParcels, newStructures, "INSIDE")

if arcpy.env.Extent == "MINOF":
    arcpy.env.Extent = arcpy.Describe(newStructures).extent
arcpy.AddMessage("Merging new structures with existing structures...")
arcpy.MakeFeatureLayer_management(existStructures,"existStructures")
arcpy.AddField_management("existStructures", "SIM_STRUCT", "SHORT")
arcpy.CalculateField_management ("existStructures", "SIM_STRUCT", "0")
arcpy.MakeFeatureLayer_management(newStructures,"newStructures")
arcpy.AddField_management("newStructures", "SIM_STRUCT", "SHORT")
arcpy.CalculateField_management ("newStructures", "SIM_STRUCT", "1")
arcpy.Merge_management ("existStructures;newStructures", outStructures)
#arcpy.Merge_management (existStructures + ";" + newStructures, outStructures) 

#Simulate future roads...
rdcst = CreateRoadCost(inDEM, "", existRoads, tWorkspace)
outRdCost = rdcst[0]
backlink = rdcst[1]

GenRoads (newStructures, outRdCost, backlink, newRoads)

arcpy.AddMessage("Merging new roads with existing roads...")
arcpy.MakeFeatureLayer_management(existRoads,"existRoads")
arcpy.AddField_management("existRoads", "SIM_RD", "SHORT")
arcpy.CalculateField_management ("existRoads", "SIM_RD", "0")
arcpy.MakeFeatureLayer_management(newRoads,"newRoads")
arcpy.AddField_management("newRoads", "SIM_RD", "SHORT")
arcpy.CalculateField_management ("newRoads", "SIM_RD", "1")
arcpy.Merge_management ("existRoads;newRoads", outRoads)

#Add outputs to display
arcpy.SetParameterAsText(6, outStructures)
arcpy.SetParameterAsText(7, outRoads)
params = arcpy.GetParameterInfo()

# Clean up temporary workspace
## CleanFiles(tWorkspace)
arcpy.Delete_management("in_memory")
